/* app/api/report/[id]/pdf/route.tsx */
import { NextResponse } from 'next/server';
import { Document, Page, Text, View, StyleSheet, pdf } from '@react-pdf/renderer';

/** Force Node runtime – react-pdf requires Node APIs. */
export const runtime = 'nodejs';
/** This endpoint must run dynamically (no static rendering). */
export const dynamic = 'force-dynamic';

/* ----------------------------------------------------------------------------
 Types – keep these minimal and aligned with /api/report/[id] response.
---------------------------------------------------------------------------- */
type FlowSlice = { label: string; value: number };
type ProfileSlice = { label: string; value: number };

type ReportPayload = {
  id: string;
  person: {
    first_name?: string | null;
    last_name?: string | null;
  };
  profileName?: string | null;
  profileCode?: string | null;
  flow?: FlowSlice[];       // Coaching flow distribution (A/B/C/D etc.)
  profiles?: ProfileSlice[]; // Primary & auxiliary profiles + %
};

/* ----------------------------------------------------------------------------
 PDF styles
---------------------------------------------------------------------------- */
const styles = StyleSheet.create({
  page: {
    padding: 36,
    fontSize: 11,
    fontFamily: 'Helvetica',
    color: '#111',
  },
  h1: {
    fontSize: 18,
    fontWeight: 700,
    marginBottom: 6,
  },
  sub: {
    fontSize: 12,
    color: '#666',
    marginBottom: 12,
  },
  hr: {
    height: 1,
    backgroundColor: '#e5e5e5',
    marginVertical: 12,
  },
  sectionTitle: {
    fontSize: 14,
    fontWeight: 700,
    marginBottom: 8,
  },
  row: {
    display: 'flex',
    flexDirection: 'row',
    gap: 16,
  },
  col: {
    flexGrow: 1,
    flexBasis: 0,
  },
  listItem: {
    marginBottom: 4,
  },
});

/* ----------------------------------------------------------------------------
 PDF component
---------------------------------------------------------------------------- */
function ReportPDF({ data }: { data: ReportPayload }) {
  const name = [data.person?.first_name, data.person?.last_name].filter(Boolean).join(' ').trim() || 'Your';
  const headlineProfile = data.profileName ?? 'Profile';
  const flow = (data.flow ?? []).slice().sort((a, b) => b.value - a.value);
  const profiles = (data.profiles ?? []).slice().sort((a, b) => b.value - a.value);

  return (
    <Document>
      <Page size="A4" style={styles.page}>
        <Text style={styles.h1}>
          {name}, your Profile is {headlineProfile}
        </Text>
        <Text style={styles.sub}>
          Report ID: {data.id}
        </Text>
        <View style={styles.hr} />

        <View style={styles.row}>
          {/* Coaching Flow (ordered, no pie) */}
          <View style={styles.col}>
            <Text style={styles.sectionTitle}>Your Coaching Flow</Text>
            {flow.length === 0 ? (
              <Text>No flow data available.</Text>
            ) : (
              flow.map((s, i) => (
                <Text key={`${s.label}-${i}`} style={styles.listItem}>
                  {s.label}: {s.value}%
                </Text>
              ))
            )}
          </View>

          {/* Primary & Auxiliary Profiles */}
          <View style={styles.col}>
            <Text style={styles.sectionTitle}>Primary & Auxiliary Profiles</Text>
            {profiles.length === 0 ? (
              <Text>No profile distribution available.</Text>
            ) : (
              profiles.map((p, i) => (
                <Text key={`${p.label}-${i}`} style={styles.listItem}>
                  {p.label}: {p.value}%
                </Text>
              ))
            )}
          </View>
        </View>

        <View style={styles.hr} />
        <Text>This PDF was generated by MindCanvas.</Text>
      </Page>
    </Document>
  );
}

/* ----------------------------------------------------------------------------
 Helper: fetch JSON for this report from your existing API
---------------------------------------------------------------------------- */
async function fetchReportJson(request: Request, id: string): Promise<ReportPayload> {
  const origin = new URL(request.url).origin;
  const res = await fetch(`${origin}/api/report/${encodeURIComponent(id)}`, {
    // ensure fresh data and allow internal call on the same deployment
    cache: 'no-store',
    headers: { 'Accept': 'application/json' },
  });
  if (!res.ok) {
    throw new Error(`Failed to load report JSON (${res.status})`);
  }
  const data = (await res.json()) as ReportPayload;
  // make sure id is present
  return { id, ...data };
}

/* ----------------------------------------------------------------------------
 GET /api/report/[id]/pdf – single export
---------------------------------------------------------------------------- */
type RouteParams = { id: string };

export async function GET(request: Request, ctx: { params: Promise<RouteParams> }) {
  try {
    const { id } = await ctx.params;

    // 1) Load the same payload used by the HTML report
    const data = await fetchReportJson(request, id);

    // 2) Build a PDF buffer
    const pdfBuffer = await pdf(<ReportPDF data={data} />).toBuffer();

    // 3) Return as a downloadable file
    return new NextResponse(pdfBuffer, {
      status: 200,
      headers: {
        'Content-Type': 'application/pdf',
        'Content-Disposition': `attachment; filename="MindCanvas_Report_${id}.pdf"`,
        'Cache-Control': 'no-store',
      },
    });
  } catch (err) {
    const msg = err instanceof Error ? err.message : 'Unknown error';
    return NextResponse.json({ error: 'PDF render failed', details: msg }, { status: 500 });
  }
}
